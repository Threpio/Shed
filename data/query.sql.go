// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteRound = `-- name: DeleteRound :exec
DELETE FROM rounds
WHERE uuid = $1
`

func (q *Queries) DeleteRound(ctx context.Context, uuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteRound, uuid)
	return err
}

const deleteTeamParticipation = `-- name: DeleteTeamParticipation :exec
DELETE FROM team_participation
WHERE team_id = $1 AND competition_day_id = $2
`

type DeleteTeamParticipationParams struct {
	TeamID           int64
	CompetitionDayID int64
}

func (q *Queries) DeleteTeamParticipation(ctx context.Context, arg DeleteTeamParticipationParams) error {
	_, err := q.db.Exec(ctx, deleteTeamParticipation, arg.TeamID, arg.CompetitionDayID)
	return err
}

const getCompetitionByID = `-- name: GetCompetitionByID :one
SELECT id, name, instance FROM competitions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCompetitionByID(ctx context.Context, id int64) (Competition, error) {
	row := q.db.QueryRow(ctx, getCompetitionByID, id)
	var i Competition
	err := row.Scan(&i.ID, &i.Name, &i.Instance)
	return i, err
}

const getCompetitionByName = `-- name: GetCompetitionByName :one
SELECT id, name, instance FROM competitions
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetCompetitionByName(ctx context.Context, name string) (Competition, error) {
	row := q.db.QueryRow(ctx, getCompetitionByName, name)
	var i Competition
	err := row.Scan(&i.ID, &i.Name, &i.Instance)
	return i, err
}

const getCompetitionDayByID = `-- name: GetCompetitionDayByID :one
SELECT id, competition_id, day FROM competition_days
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCompetitionDayByID(ctx context.Context, id int64) (CompetitionDay, error) {
	row := q.db.QueryRow(ctx, getCompetitionDayByID, id)
	var i CompetitionDay
	err := row.Scan(&i.ID, &i.CompetitionID, &i.Day)
	return i, err
}

const getMatchByCompetitionDayID = `-- name: GetMatchByCompetitionDayID :many
SELECT
    M.uuid AS match_id,
    M.team1_id,
    T1.name AS team1_name,
    M.team2_id,
    T2.name AS team2_name,
    M.court,
    M.refs_id,
    R.name AS ref_name,
    R.play_category,
    CD.day AS competition_day,
    RD.number AS round_number
FROM matches M
         JOIN rounds RD ON M.round_uuid = RD.uuid
         JOIN competition_days CD ON RD.competition_day_id = CD.id
         JOIN teams T1 ON M.team1_id = T1.id
         JOIN teams T2 ON M.team2_id = T2.id
         JOIN refs R ON M.refs_id = R.id
WHERE CD.id = $1
`

type GetMatchByCompetitionDayIDRow struct {
	MatchID        pgtype.UUID
	Team1ID        int64
	Team1Name      string
	Team2ID        int64
	Team2Name      string
	Court          int32
	RefsID         int64
	RefName        string
	PlayCategory   string
	CompetitionDay string
	RoundNumber    int32
}

func (q *Queries) GetMatchByCompetitionDayID(ctx context.Context, id int64) ([]GetMatchByCompetitionDayIDRow, error) {
	rows, err := q.db.Query(ctx, getMatchByCompetitionDayID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMatchByCompetitionDayIDRow
	for rows.Next() {
		var i GetMatchByCompetitionDayIDRow
		if err := rows.Scan(
			&i.MatchID,
			&i.Team1ID,
			&i.Team1Name,
			&i.Team2ID,
			&i.Team2Name,
			&i.Court,
			&i.RefsID,
			&i.RefName,
			&i.PlayCategory,
			&i.CompetitionDay,
			&i.RoundNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMatchByID = `-- name: GetMatchByID :one
SELECT uuid, round_uuid, refs_id, team1_id, team2_id, court FROM matches
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetMatchByID(ctx context.Context, uuid pgtype.UUID) (Match, error) {
	row := q.db.QueryRow(ctx, getMatchByID, uuid)
	var i Match
	err := row.Scan(
		&i.Uuid,
		&i.RoundUuid,
		&i.RefsID,
		&i.Team1ID,
		&i.Team2ID,
		&i.Court,
	)
	return i, err
}

const getParentOrganisationByID = `-- name: GetParentOrganisationByID :one
SELECT id, name FROM parent_organisations
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetParentOrganisationByID(ctx context.Context, id int64) (ParentOrganisation, error) {
	row := q.db.QueryRow(ctx, getParentOrganisationByID, id)
	var i ParentOrganisation
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getParentOrganisationByName = `-- name: GetParentOrganisationByName :one
SELECT id, name FROM parent_organisations
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetParentOrganisationByName(ctx context.Context, name string) (ParentOrganisation, error) {
	row := q.db.QueryRow(ctx, getParentOrganisationByName, name)
	var i ParentOrganisation
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRefByID = `-- name: GetRefByID :one
SELECT id, name, parent_organisation, play_category, competition_days FROM refs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRefByID(ctx context.Context, id int64) (Ref, error) {
	row := q.db.QueryRow(ctx, getRefByID, id)
	var i Ref
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentOrganisation,
		&i.PlayCategory,
		&i.CompetitionDays,
	)
	return i, err
}

const getRoundByID = `-- name: GetRoundByID :one
SELECT uuid, number, competition_day_id FROM rounds
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetRoundByID(ctx context.Context, uuid pgtype.UUID) (Round, error) {
	row := q.db.QueryRow(ctx, getRoundByID, uuid)
	var i Round
	err := row.Scan(&i.Uuid, &i.Number, &i.CompetitionDayID)
	return i, err
}

const getTeamByID = `-- name: GetTeamByID :one
SELECT id, name, competition_id, parent_organisation_id, play_category FROM teams
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTeamByID(ctx context.Context, id int64) (Team, error) {
	row := q.db.QueryRow(ctx, getTeamByID, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CompetitionID,
		&i.ParentOrganisationID,
		&i.PlayCategory,
	)
	return i, err
}

const getTeamParticipationByCompetitionDayID = `-- name: GetTeamParticipationByCompetitionDayID :many
SELECT
    T.id AS team_id,
    T.name AS team_name,
    PO.name AS parent_organisation_name,
    T.play_category,
    CD.day AS competition_day
FROM team_participation TP
         JOIN teams T ON TP.team_id = T.id
         JOIN competition_days CD ON TP.competition_day_id = CD.id
         JOIN parent_organisations PO ON T.parent_organisation_id = PO.id
WHERE CD.id = $1
`

type GetTeamParticipationByCompetitionDayIDRow struct {
	TeamID                 int64
	TeamName               string
	ParentOrganisationName string
	PlayCategory           interface{}
	CompetitionDay         string
}

func (q *Queries) GetTeamParticipationByCompetitionDayID(ctx context.Context, id int64) ([]GetTeamParticipationByCompetitionDayIDRow, error) {
	rows, err := q.db.Query(ctx, getTeamParticipationByCompetitionDayID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeamParticipationByCompetitionDayIDRow
	for rows.Next() {
		var i GetTeamParticipationByCompetitionDayIDRow
		if err := rows.Scan(
			&i.TeamID,
			&i.TeamName,
			&i.ParentOrganisationName,
			&i.PlayCategory,
			&i.CompetitionDay,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCompetition = `-- name: InsertCompetition :one
INSERT INTO competitions (
    name, instance
) VALUES ($1, $2)
RETURNING id, name, instance
`

type InsertCompetitionParams struct {
	Name     string
	Instance string
}

func (q *Queries) InsertCompetition(ctx context.Context, arg InsertCompetitionParams) (Competition, error) {
	row := q.db.QueryRow(ctx, insertCompetition, arg.Name, arg.Instance)
	var i Competition
	err := row.Scan(&i.ID, &i.Name, &i.Instance)
	return i, err
}

const insertCompetitionDay = `-- name: InsertCompetitionDay :one
INSERT INTO competition_days (
    competition_id, day
) VALUES ($1, $2)
RETURNING id, competition_id, day
`

type InsertCompetitionDayParams struct {
	CompetitionID int64
	Day           string
}

func (q *Queries) InsertCompetitionDay(ctx context.Context, arg InsertCompetitionDayParams) (CompetitionDay, error) {
	row := q.db.QueryRow(ctx, insertCompetitionDay, arg.CompetitionID, arg.Day)
	var i CompetitionDay
	err := row.Scan(&i.ID, &i.CompetitionID, &i.Day)
	return i, err
}

const insertMatch = `-- name: InsertMatch :one
INSERT INTO matches (
    round_uuid, refs_id, team1_id, team2_id, court)
VALUES ($1, $2, $3, $4, $5)
RETURNING uuid, round_uuid, refs_id, team1_id, team2_id, court
`

type InsertMatchParams struct {
	RoundUuid pgtype.UUID
	RefsID    int64
	Team1ID   int64
	Team2ID   int64
	Court     int32
}

func (q *Queries) InsertMatch(ctx context.Context, arg InsertMatchParams) (Match, error) {
	row := q.db.QueryRow(ctx, insertMatch,
		arg.RoundUuid,
		arg.RefsID,
		arg.Team1ID,
		arg.Team2ID,
		arg.Court,
	)
	var i Match
	err := row.Scan(
		&i.Uuid,
		&i.RoundUuid,
		&i.RefsID,
		&i.Team1ID,
		&i.Team2ID,
		&i.Court,
	)
	return i, err
}

const insertParentOrganisation = `-- name: InsertParentOrganisation :one
INSERT INTO parent_organisations (
    name
) VALUES ($1)
RETURNING id, name
`

func (q *Queries) InsertParentOrganisation(ctx context.Context, name string) (ParentOrganisation, error) {
	row := q.db.QueryRow(ctx, insertParentOrganisation, name)
	var i ParentOrganisation
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertRef = `-- name: InsertRef :one
INSERT INTO refs (
    name, parent_organisation, play_category, competition_days
) VALUES ($1, $2, $3, $4)
RETURNING id, name, parent_organisation, play_category, competition_days
`

type InsertRefParams struct {
	Name               string
	ParentOrganisation int64
	PlayCategory       string
	CompetitionDays    int64
}

func (q *Queries) InsertRef(ctx context.Context, arg InsertRefParams) (Ref, error) {
	row := q.db.QueryRow(ctx, insertRef,
		arg.Name,
		arg.ParentOrganisation,
		arg.PlayCategory,
		arg.CompetitionDays,
	)
	var i Ref
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ParentOrganisation,
		&i.PlayCategory,
		&i.CompetitionDays,
	)
	return i, err
}

const insertRound = `-- name: InsertRound :one
INSERT INTO rounds (
    number, competition_day_id
) VALUES ($1, $2)
RETURNING uuid, number, competition_day_id
`

type InsertRoundParams struct {
	Number           int32
	CompetitionDayID int64
}

func (q *Queries) InsertRound(ctx context.Context, arg InsertRoundParams) (Round, error) {
	row := q.db.QueryRow(ctx, insertRound, arg.Number, arg.CompetitionDayID)
	var i Round
	err := row.Scan(&i.Uuid, &i.Number, &i.CompetitionDayID)
	return i, err
}

const insertTeam = `-- name: InsertTeam :one
INSERT INTO teams (
    name, competition_id, parent_organisation_id, play_category
) VALUES ($1, $2, $3, $4)
RETURNING id, name, competition_id, parent_organisation_id, play_category
`

type InsertTeamParams struct {
	Name                 string
	CompetitionID        int64
	ParentOrganisationID int64
	PlayCategory         interface{}
}

func (q *Queries) InsertTeam(ctx context.Context, arg InsertTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, insertTeam,
		arg.Name,
		arg.CompetitionID,
		arg.ParentOrganisationID,
		arg.PlayCategory,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CompetitionID,
		&i.ParentOrganisationID,
		&i.PlayCategory,
	)
	return i, err
}

const insertTeamParticipation = `-- name: InsertTeamParticipation :one
INSERT INTO team_participation (
    team_id, competition_day_id
) VALUES ($1, $2)
RETURNING team_id, competition_day_id
`

type InsertTeamParticipationParams struct {
	TeamID           int64
	CompetitionDayID int64
}

func (q *Queries) InsertTeamParticipation(ctx context.Context, arg InsertTeamParticipationParams) (TeamParticipation, error) {
	row := q.db.QueryRow(ctx, insertTeamParticipation, arg.TeamID, arg.CompetitionDayID)
	var i TeamParticipation
	err := row.Scan(&i.TeamID, &i.CompetitionDayID)
	return i, err
}

const listCompetitionDays = `-- name: ListCompetitionDays :many
SELECT id, competition_id, day FROM competition_days limit 100
`

func (q *Queries) ListCompetitionDays(ctx context.Context) ([]CompetitionDay, error) {
	rows, err := q.db.Query(ctx, listCompetitionDays)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompetitionDay
	for rows.Next() {
		var i CompetitionDay
		if err := rows.Scan(&i.ID, &i.CompetitionID, &i.Day); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompetitionDaysByCompetitionID = `-- name: ListCompetitionDaysByCompetitionID :many
SELECT id, competition_id, day FROM competition_days
WHERE competition_id = $1 LIMIT 100
`

func (q *Queries) ListCompetitionDaysByCompetitionID(ctx context.Context, competitionID int64) ([]CompetitionDay, error) {
	rows, err := q.db.Query(ctx, listCompetitionDaysByCompetitionID, competitionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompetitionDay
	for rows.Next() {
		var i CompetitionDay
		if err := rows.Scan(&i.ID, &i.CompetitionID, &i.Day); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompetitions = `-- name: ListCompetitions :many
SELECT id, name, instance FROM competitions limit 100
`

func (q *Queries) ListCompetitions(ctx context.Context) ([]Competition, error) {
	rows, err := q.db.Query(ctx, listCompetitions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Competition
	for rows.Next() {
		var i Competition
		if err := rows.Scan(&i.ID, &i.Name, &i.Instance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMatches = `-- name: ListMatches :many
SELECT uuid, round_uuid, refs_id, team1_id, team2_id, court FROM matches limit 100
`

func (q *Queries) ListMatches(ctx context.Context) ([]Match, error) {
	rows, err := q.db.Query(ctx, listMatches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Match
	for rows.Next() {
		var i Match
		if err := rows.Scan(
			&i.Uuid,
			&i.RoundUuid,
			&i.RefsID,
			&i.Team1ID,
			&i.Team2ID,
			&i.Court,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMatchesByRoundID = `-- name: ListMatchesByRoundID :many
SELECT uuid, round_uuid, refs_id, team1_id, team2_id, court FROM matches
WHERE round_uuid = $1 limit 100
`

func (q *Queries) ListMatchesByRoundID(ctx context.Context, roundUuid pgtype.UUID) ([]Match, error) {
	rows, err := q.db.Query(ctx, listMatchesByRoundID, roundUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Match
	for rows.Next() {
		var i Match
		if err := rows.Scan(
			&i.Uuid,
			&i.RoundUuid,
			&i.RefsID,
			&i.Team1ID,
			&i.Team2ID,
			&i.Court,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParentOrganisations = `-- name: ListParentOrganisations :many
SELECT id, name FROM parent_organisations limit 100
`

func (q *Queries) ListParentOrganisations(ctx context.Context) ([]ParentOrganisation, error) {
	rows, err := q.db.Query(ctx, listParentOrganisations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParentOrganisation
	for rows.Next() {
		var i ParentOrganisation
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRefs = `-- name: ListRefs :many
SELECT id, name, parent_organisation, play_category, competition_days FROM refs limit 100
`

func (q *Queries) ListRefs(ctx context.Context) ([]Ref, error) {
	rows, err := q.db.Query(ctx, listRefs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ref
	for rows.Next() {
		var i Ref
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentOrganisation,
			&i.PlayCategory,
			&i.CompetitionDays,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRefsByCompetitonDayID = `-- name: ListRefsByCompetitonDayID :many
SELECT id, name, parent_organisation, play_category, competition_days FROM refs
WHERE competition_days = $1 limit 100
`

func (q *Queries) ListRefsByCompetitonDayID(ctx context.Context, competitionDays int64) ([]Ref, error) {
	rows, err := q.db.Query(ctx, listRefsByCompetitonDayID, competitionDays)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ref
	for rows.Next() {
		var i Ref
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ParentOrganisation,
			&i.PlayCategory,
			&i.CompetitionDays,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRounds = `-- name: ListRounds :many
SELECT uuid, number, competition_day_id FROM rounds limit 100
`

func (q *Queries) ListRounds(ctx context.Context) ([]Round, error) {
	rows, err := q.db.Query(ctx, listRounds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Round
	for rows.Next() {
		var i Round
		if err := rows.Scan(&i.Uuid, &i.Number, &i.CompetitionDayID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoundsByCompetitionDayID = `-- name: ListRoundsByCompetitionDayID :many
SELECT uuid, number, competition_day_id FROM rounds
WHERE competition_day_id = $1 limit 100
`

func (q *Queries) ListRoundsByCompetitionDayID(ctx context.Context, competitionDayID int64) ([]Round, error) {
	rows, err := q.db.Query(ctx, listRoundsByCompetitionDayID, competitionDayID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Round
	for rows.Next() {
		var i Round
		if err := rows.Scan(&i.Uuid, &i.Number, &i.CompetitionDayID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamParticipation = `-- name: ListTeamParticipation :many
SELECT team_id, competition_day_id FROM team_participation limit 100
`

func (q *Queries) ListTeamParticipation(ctx context.Context) ([]TeamParticipation, error) {
	rows, err := q.db.Query(ctx, listTeamParticipation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamParticipation
	for rows.Next() {
		var i TeamParticipation
		if err := rows.Scan(&i.TeamID, &i.CompetitionDayID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamParticipationByCompetitionDayID = `-- name: ListTeamParticipationByCompetitionDayID :many
SELECT team_id, competition_day_id FROM team_participation
WHERE competition_day_id = $1 limit 100
`

func (q *Queries) ListTeamParticipationByCompetitionDayID(ctx context.Context, competitionDayID int64) ([]TeamParticipation, error) {
	rows, err := q.db.Query(ctx, listTeamParticipationByCompetitionDayID, competitionDayID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamParticipation
	for rows.Next() {
		var i TeamParticipation
		if err := rows.Scan(&i.TeamID, &i.CompetitionDayID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamParticipationByTeamID = `-- name: ListTeamParticipationByTeamID :many
SELECT team_id, competition_day_id FROM team_participation
WHERE team_id = $1 limit 100
`

func (q *Queries) ListTeamParticipationByTeamID(ctx context.Context, teamID int64) ([]TeamParticipation, error) {
	rows, err := q.db.Query(ctx, listTeamParticipationByTeamID, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TeamParticipation
	for rows.Next() {
		var i TeamParticipation
		if err := rows.Scan(&i.TeamID, &i.CompetitionDayID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeams = `-- name: ListTeams :many
SELECT id, name, competition_id, parent_organisation_id, play_category FROM teams limit 100
`

func (q *Queries) ListTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.Query(ctx, listTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CompetitionID,
			&i.ParentOrganisationID,
			&i.PlayCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamsByCompetitionID = `-- name: ListTeamsByCompetitionID :many
SELECT id, name, competition_id, parent_organisation_id, play_category FROM teams
WHERE competition_id = $1 limit 100
`

func (q *Queries) ListTeamsByCompetitionID(ctx context.Context, competitionID int64) ([]Team, error) {
	rows, err := q.db.Query(ctx, listTeamsByCompetitionID, competitionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CompetitionID,
			&i.ParentOrganisationID,
			&i.PlayCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeamsByParentOrganisationID = `-- name: ListTeamsByParentOrganisationID :many
SELECT id, name, competition_id, parent_organisation_id, play_category FROM teams
WHERE parent_organisation_id = $1 limit 100
`

func (q *Queries) ListTeamsByParentOrganisationID(ctx context.Context, parentOrganisationID int64) ([]Team, error) {
	rows, err := q.db.Query(ctx, listTeamsByParentOrganisationID, parentOrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CompetitionID,
			&i.ParentOrganisationID,
			&i.PlayCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchParentOrganisationByName = `-- name: SearchParentOrganisationByName :many
SELECT id, name FROM parent_organisations
WHERE name LIKE '%' || $1 || '%' limit 100
`

func (q *Queries) SearchParentOrganisationByName(ctx context.Context, dollar_1 pgtype.Text) ([]ParentOrganisation, error) {
	rows, err := q.db.Query(ctx, searchParentOrganisationByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParentOrganisation
	for rows.Next() {
		var i ParentOrganisation
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompetitionDay = `-- name: UpdateCompetitionDay :exec
UPDATE competition_days SET
    competition_id = $2,
    day = $3
WHERE id = $1
`

type UpdateCompetitionDayParams struct {
	ID            int64
	CompetitionID int64
	Day           string
}

func (q *Queries) UpdateCompetitionDay(ctx context.Context, arg UpdateCompetitionDayParams) error {
	_, err := q.db.Exec(ctx, updateCompetitionDay, arg.ID, arg.CompetitionID, arg.Day)
	return err
}

const updateCompetitions = `-- name: UpdateCompetitions :exec
UPDATE competitions SET
    name = $2,
    instance = $3
WHERE id = $1
`

type UpdateCompetitionsParams struct {
	ID       int64
	Name     string
	Instance string
}

func (q *Queries) UpdateCompetitions(ctx context.Context, arg UpdateCompetitionsParams) error {
	_, err := q.db.Exec(ctx, updateCompetitions, arg.ID, arg.Name, arg.Instance)
	return err
}

const updateParentOrganisation = `-- name: UpdateParentOrganisation :exec
UPDATE parent_organisations SET
    name = $2
WHERE id = $1
`

type UpdateParentOrganisationParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateParentOrganisation(ctx context.Context, arg UpdateParentOrganisationParams) error {
	_, err := q.db.Exec(ctx, updateParentOrganisation, arg.ID, arg.Name)
	return err
}

const updateRef = `-- name: UpdateRef :exec
UPDATE refs SET
    name = $2,
    parent_organisation = $3,
    play_category = $4,
    competition_days = $5
WHERE id = $1
`

type UpdateRefParams struct {
	ID                 int64
	Name               string
	ParentOrganisation int64
	PlayCategory       string
	CompetitionDays    int64
}

func (q *Queries) UpdateRef(ctx context.Context, arg UpdateRefParams) error {
	_, err := q.db.Exec(ctx, updateRef,
		arg.ID,
		arg.Name,
		arg.ParentOrganisation,
		arg.PlayCategory,
		arg.CompetitionDays,
	)
	return err
}

const updateRound = `-- name: UpdateRound :exec
UPDATE rounds SET
    number = $2,
    competition_day_id = $3
WHERE uuid = $1
`

type UpdateRoundParams struct {
	Uuid             pgtype.UUID
	Number           int32
	CompetitionDayID int64
}

func (q *Queries) UpdateRound(ctx context.Context, arg UpdateRoundParams) error {
	_, err := q.db.Exec(ctx, updateRound, arg.Uuid, arg.Number, arg.CompetitionDayID)
	return err
}

const updateTeam = `-- name: UpdateTeam :exec
UPDATE teams SET
    name = $2,
    competition_id = $3,
    parent_organisation_id = $4,
    play_category = $5
WHERE id = $1
`

type UpdateTeamParams struct {
	ID                   int64
	Name                 string
	CompetitionID        int64
	ParentOrganisationID int64
	PlayCategory         interface{}
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) error {
	_, err := q.db.Exec(ctx, updateTeam,
		arg.ID,
		arg.Name,
		arg.CompetitionID,
		arg.ParentOrganisationID,
		arg.PlayCategory,
	)
	return err
}

const updateTeamParticipation = `-- name: UpdateTeamParticipation :exec
UPDATE team_participation SET
    team_id = $3,
    competition_day_id = $4
WHERE team_id = $1 AND competition_day_id = $2
`

type UpdateTeamParticipationParams struct {
	TeamID             int64
	CompetitionDayID   int64
	TeamID_2           int64
	CompetitionDayID_2 int64
}

func (q *Queries) UpdateTeamParticipation(ctx context.Context, arg UpdateTeamParticipationParams) error {
	_, err := q.db.Exec(ctx, updateTeamParticipation,
		arg.TeamID,
		arg.CompetitionDayID,
		arg.TeamID_2,
		arg.CompetitionDayID_2,
	)
	return err
}
